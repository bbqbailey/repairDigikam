
//repairDigikam - a program to repair my broken digikam database
//  A program to facilitate fixing my broken Digikam database.
//
//  Accepts two arguments:
//      -h --help  Help
//      -i --infile input file of bad filename data.  Default nullAlbum.dat
//      -o --outfile output file for corrected data.  Default namesCorrected.dat
//  
//
//  Copyright (c) 2017, Ben Bailey.  All rights reservied.
//  Use of this source code is governed by a BSD-stle
//  license that can be found in the LICENSE file.
//
//  Digikam is a photo manger.  I put a lot of time into identifying photos
//  and putting them into this app.
//  
//  At some point, I changed file names that contained spaces to underscores.
//  This caused Digikam to break, but I didn't realize this for months so
//  it was going to be difficult to go back to original location and names.
//
//  Using sqlite3, I created an input file containing key and data 
//  for problem files.  This program requires the structure of 
//  this input file to be in the form: key|Filename, followed by a return/line-feed
//
//  For every bad file name and location contained in the input file
//   -if the name contains spaces, replace with underscore
//   -locate the corrected file name in existing directory structure on disk.
//   -output corrections to be applied to digikam database via sqlite3, (key,data)
//  
//  A seperate effort (e.g., sqlite3) would insert the corrections into Digikam.
//
//  This program was able to load a file from disk containing 10,310 bad filenames,
//  and walk, then load into a avltree, the 17,165 directory entries on the 
//  hard drive.  For each bad file name, it corrected those names from " " to "_", 
//  and matched those names against the 17,165 files in the avltree, and wrote 
//  the resulting correction data to a file on disk.  This completed in less
//  than a second on my desktop.
//
//  Internally, the program uses a an array for the bad filenames, which
//  it iterates through sequentially for each bad filename to correct,
//  then searches for the location on the directory structure for the matching
//  file.  In order to avoid the time associated with searching lineraly through
//  the directory structure, it performs a filepath.Walk to find all of the
//  directory entries and stores these into a balanced binary tree (avltree)
//  for fast searches.  A test using a linear search resulted in a run time 
//  of about 1 minute, so a significant improvement was obtained using the
//  avltree.
//  
//  Package avltree states that it is "not thread safe", therefore,
//  this application is not thread safe.
//  
//  References: https://en.wikipedia.org/wiki/AVL_tree
//      github.comemirpasic/gods/blob/master/trees/avltree/avltree.go

